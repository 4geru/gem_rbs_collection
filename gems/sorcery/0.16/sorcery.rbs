module Sorcery
  module Model
    def authenticates_with_sorcery!: () -> void

    module ClassMethods
      def authenticate: (*String credentials) ?{ () -> untyped } -> (instance | nil)
    end
  end

  module Controller
    module InstanceMethods[T]
      def require_login: () -> void

      type failure_reason = :invalid_login | :invalid_password | :inactive
      def login: [U] (*String credentials) ?{ (T, (failure_reason | nil | untyped)) -> U } -> (T | nil | U)

      def logged_in?: () -> bool
      def current_user: () -> (T | nil)
      def logout: () -> (nil | void)
      def auto_login: (T, ?bool should_remember) -> void
      def redirect_back_or_to: (String url, ?Hash[(String | Symbol), String] flash_hash) -> void
    end
  end
end
