module Faraday
  attr_reader self.default_adapter: Symbol

  def self.new: (?untyped url, ?untyped options) ?{ (?untyped) -> void } -> Faraday::Connection

  class Connection
    def get: (?String url, ?untyped params, ?untyped headers) ?{ (Faraday::Request) -> void } -> Faraday::Response
    def head: (?String url, ?untyped params, ?untyped headers) ?{ (Faraday::Request) -> void } -> Faraday::Response
    def delete: (?String url, ?untyped params, ?untyped headers) ?{ (Faraday::Request) -> void } -> Faraday::Response
    def trace: (?String url, ?untyped params, ?untyped headers) ?{ (Faraday::Request) -> void } -> Faraday::Response

    def post: (?String url, ?untyped body, ?untyped headers) ?{ (Faraday::Request) -> void } -> Faraday::Response
    def put: (?String url, ?untyped body, ?untyped headers) ?{ (Faraday::Request) -> void } -> Faraday::Response
    def patch: (?String url, ?untyped body, ?untyped headers) ?{ (Faraday::Request) -> void } -> Faraday::Response
  end

  class Response
    def status: () -> Integer
    def headers: () -> untyped
    def body: () -> String
  end

  class Request
    def http_method=: (untyped) -> void
    def path=: (untyped) -> void
    def params=: (untyped) -> void
    def headers=: (untyped) -> void
    def body=: (untyped) -> void
    def options=: (untyped) -> void
    def url=: (untyped path, untyped hash) -> void
    def []: (untyped key) -> void
    def []=: (untyped key, untyped value) -> void
  end
end
